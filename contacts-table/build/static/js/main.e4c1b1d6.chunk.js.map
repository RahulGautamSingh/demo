{"version":3,"sources":["Components/Context.jsx","Components/InputArea.jsx","Components/TableRow.jsx","Components/DisplayArea.jsx","Components/App.jsx","index.js"],"names":["ContactContext","createContext","initialState","arr","reducer","state","action","newCopy","push","index","length","id","splice","Error","ContactContextProvider","props","useReducer","contactState","dispatch","Provider","value","children","InputArea","contextData","useContext","nameRef","useRef","emailRef","useState","check","setCheck","className","type","ref","placeholder","onChange","e","target","reportValidity","current","onClick","preventDefault","currID","name","email","updateData","disabled","TableRow","class","DisplayArea","map","elem","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4c1b1d6.chunk.js","sourcesContent":["import {createContext, useReducer} from \"react\";\r\n\r\nlet ContactContext = createContext();\r\n\r\nexport default ContactContext;\r\n\r\nlet initialState = {\r\n    arr:[],\r\n}\r\nfunction reducer(state,action)\r\n{   let newCopy = [...state.arr];\r\n    switch(action[0])\r\n    {\r\n        case \"ADD\":{\r\n                newCopy.push(action[1]);\r\n                return {arr:newCopy}\r\n        }\r\n        case \"DEL\":{\r\n            for(let index=0;index<newCopy.length;index++)\r\n            {\r\n                if(action[1].id===newCopy[index].id) \r\n                {newCopy.splice(index,1);break;}\r\n            }\r\n            return {arr:newCopy}\r\n    }\r\n    default : throw new Error(\"karna kya chhahte ho\")\r\n    }\r\n}\r\n\r\n\r\nexport function ContactContextProvider(props)\r\n{\r\n    \r\n    \r\n    let [contactState,dispatch] = useReducer(reducer,initialState)\r\n    return (\r\n        <ContactContext.Provider value={{\r\n            contactState,\r\n            dispatch\r\n        }}>\r\n            {props.children}\r\n        </ContactContext.Provider>\r\n    )\r\n}","import { useContext, useRef, useState } from \"react\";\r\nimport ContactContext from \"./Context\";\r\n\r\nexport default function InputArea(props) {\r\n  let contextData = useContext(ContactContext);\r\n  let nameRef = useRef(\"\");\r\n  let emailRef = useRef(\"\");\r\n  let [check, setCheck] = useState(true);\r\n\r\n  function updateData() {\r\n    let currID;\r\n    if (nameRef.current.value !== \"\" && emailRef.current.value !== \"\") {\r\n      if (contextData.contactState.arr.length === 0) currID = 1;\r\n      else\r\n        currID =\r\n          contextData.contactState.arr[contextData.contactState.arr.length - 1]\r\n            .id + 1;\r\n\r\n      contextData.dispatch([\r\n        \"ADD\",\r\n        {\r\n          id: currID,\r\n          name: nameRef.current.value,\r\n          email: emailRef.current.value,\r\n        },\r\n      ]);\r\n    }\r\n    nameRef.current.value = \"\";\r\n    emailRef.current.value = \"\";\r\n    setCheck(true);\r\n  }\r\n  return (\r\n    <div className=\"input-container\">\r\n      <form action=\"\" className=\"form-container\">\r\n        <input\r\n          type=\"text\"\r\n          ref={nameRef}\r\n          className=\"contact-name\"\r\n          placeholder=\"Enter name\"\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          ref={emailRef}\r\n          className=\"contact-email\"\r\n          placeholder=\"Enter email address\"\r\n         \r\n          onChange={(e) => {\r\n            if (e.target.reportValidity() && nameRef.current.value !== \"\")\r\n              setCheck(false);\r\n          }}\r\n        />\r\n        <button\r\n          className=\"add-btn\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n\r\n            updateData();\r\n          }}\r\n          type=\"submit\"\r\n          disabled={check}\r\n        >\r\n          New Contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import { useContext} from \"react\"\r\nimport ContactContext from \"./Context\"\r\nexport default function TableRow(props)\r\n{  let contextData = useContext(ContactContext)\r\n\r\n\r\n    return (\r\n    <tr>\r\n        <td>{props.id}</td>\r\n        <td>{props.name}</td>\r\n        <td>{props.email}</td>\r\n        <td class=\"del-td\">\r\n            <button className=\"del-btn\" \r\n            onClick={()=>  contextData.dispatch([\"DEL\",{id:props.id}])}>ðŸ—‘  Remove User</button>\r\n        </td>\r\n    </tr>\r\n    )\r\n}","import TableRow from \"./TableRow\";\r\nimport { useContext} from \"react\"\r\nimport ContactContext from \"./Context\"\r\n\r\nexport default function DisplayArea(props)\r\n{let contextData = useContext(ContactContext)\r\n\r\n    return (\r\n        <div className=\"display-container\">\r\n            {contextData.contactState.arr.length===0 && <p>No Contacts to show</p>}\r\n            {contextData.contactState.arr.length!==0 &&\r\n        <table className=\"roundedTable\">\r\n            <tr>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th className=\"delete-btn\">Delete?</th>\r\n            </tr>\r\n            \r\n            {\r\n               contextData.contactState.arr.map(elem=><TableRow id={elem.id} name={elem.name} email={elem.email}/>)\r\n            }\r\n        </table>\r\n}\r\n        </div>\r\n    )\r\n}","import InputArea from \"./InputArea\";\r\nimport DisplayArea from \"./DisplayArea\";\r\nimport { ContactContextProvider } from \"./Context\";\r\n\r\nexport default function App(props)\r\n{\r\n    return (\r\n        <ContactContextProvider>\r\n      <div className=\"container\">\r\n          <h1>React Hooks Context Demo</h1>\r\n        <h3>Contacts</h3>\r\n        <InputArea/>\r\n        <DisplayArea />\r\n\r\n      </div>\r\n      </ContactContextProvider>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}